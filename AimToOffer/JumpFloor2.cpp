//题目描述：
/* 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
思路1：开始时自己通过推导，一步一步就发现了规律，发f(n) = 2 ^ (n-1) ，此方法依靠推导和直觉推出来
思路2：排列组合的方法，想象成隔板问题，一个 n - 1 个隔板位置，都可以放或者不放隔板，所以一共有
c(n-1,0)+c(n-1,1)+...+c(n-1,n-1)=2^(n-1) 种方法。
思路3：台阶都可以有两种状态，被跳上和不被跳上，最后一个台阶只有被跳上的状态，所以最后有 2 的 n - 1 次跳法

实现方法：尽量不用递归，考虑不同的输入情况，使用一个循环计算乘方即可。具有启发性的方法是利用移位操作。
实现方法2：不做优化，强行算出来结果，因为第 n 台阶的跳法跟前面有关，可以用数组依次保存前面计算的结果，一直
推导下去，需要用到循环嵌套。不推荐这种方法。 */
class Solution {
public:
    int jumpFloorII(int number) {
        if(number < 0){
            return -1;
        }
        return 1 << (number - 1);
    }
    int jumpFloorII2(int number){
        int *a=new int[number+1];
        a[0]=1;
        a[1]=1;
        for(int i=2;i<=number;i++){
            a[i]=0;
            for(int j=i-1;j>=0;j--){
                a[i]+=a[j];
            }
        }
        return a[number];
    }
};